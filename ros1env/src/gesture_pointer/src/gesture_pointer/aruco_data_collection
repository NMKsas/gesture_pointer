#!/usr/bin/env python3

import numpy as np 
import rospy 
from utils.file_utils import generate_csv
from geometry_msgs.msg import PoseStamped

ATTEMPTS = 15
DEBUG_ENABLED = True
CAMERA_TF_FRAME = 'st_cam_color_optical_frame'
CORNERS_FILE_NAME = 'corners_mean.csv'
MARKERS = [100,101,102,103] 

def print_pose(pose_mean, pose_variance): 
    """
    Print the given pose list in ROS1 Pose format. For debugging. 
    Args:
        pose (List[x,y,z,x,y,z,w]): The pose as a List; position (x,y,z) and 
                                    quartenion (x,y,z,w)
    """
    print("-------------------------------")
    print("Mean values for plane pose")
    print("-------------------------------")
    print("position:\n"
          +f"\t x:{pose_mean[0]}\n"
          +f"\t y:{pose_mean[1]}\n"
          +f"\t z:{pose_mean[2]}\n"
          +"orientation:\n"
          +f"\t x:{pose_mean[3]}\n"
          +f"\t y:{pose_mean[4]}\n"
          +f"\t z:{pose_mean[5]}\n"
          +f"\t w:{pose_mean[6]}")
    print("-------------------------------")
    print("Variance for plane pose")
    print("position:\n"
          +f"\t x:{pose_variance[0]}\n"
          +f"\t y:{pose_variance[1]}\n"
          +f"\t z:{pose_variance[2]}\n"
          +"orientation:\n"
          +f"\t x:{pose_variance[3]}\n"
          +f"\t y:{pose_variance[4]}\n"
          +f"\t z:{pose_variance[5]}\n"
          +f"\t w:{pose_variance[6]}")
    print("-------------------------------")

def get_single_msg(topic, msg_type):
    """
    Attempt to subscribe single message. 

    Args:
        topic (str): ROS1 topic identifier 

    Returns:
        msg: Valid message or None 
    """
    msg = None 
    try:
        msg = rospy.wait_for_message(topic, msg_type, 
                                     timeout=5)
    except rospy.ROSException as e: 
        print(e)
        print("Valid message not received for %s" % topic)
    return msg


def get_mean_pose(pose_topic, samples=20): 
    """
    Subscribes a given number of samples for PoseStamped messages. 
    Computes the mean and variance. Saves the samples into .csv file. 

    Args:
        pose_topic (str): ROS1 topic identifier for the Pose 
        samples (int, optional): Number of samples. Defaults to 100.

    Returns:
        np.array, np.array: Mean and variance for target 
                            position (x,y,z) and orientation (x,y,z,w)  
    """

    frame_poses = []
    for i in range(samples): 
        msg = get_single_msg(pose_topic, PoseStamped)

        # interrupt the process if no valid pose is found
        if msg is None: 
            return None, None 
        frame_poses.append([msg.pose.position.x, 
                            msg.pose.position.y,
                            msg.pose.position.z,
                            msg.pose.orientation.x,
                            msg.pose.orientation.y,
                            msg.pose.orientation.z,
                            msg.pose.orientation.w])
        print("Added pose sample no. " + str(i))

    mean = np.mean(np.array(frame_poses), axis=0)
    variance = np.var(np.array(frame_poses), axis=0)

    return mean, variance

def main(args=None):

    rospy.init_node('aruco_data_collector', anonymous=True)
    rospy.loginfo("Giving 5 seconds for markers to initialize")
    rospy.sleep(5)

    markers_pose = []
    while not rospy.is_shutdown(): 

        # iterate over each ArUco ID
        for id in MARKERS: 
            pose_mean = None 
            
            # attempt collecting target mean & variance over a number of samples
            for i in range(ATTEMPTS):
                pose_mean, pose_variance = get_mean_pose("/aruco_" + str(id) 
                                                         + "/pose")
                
                if DEBUG_ENABLED: 
                    print(f"Target {str(id)} mean and variance")
                    print_pose(pose_mean, pose_variance)

                # mean calculated successfully, stop  
                if pose_mean is not None: 
                    data = pose_mean.tolist() 
                    data.insert(0, CAMERA_TF_FRAME)
                    data.insert(0, str(id))
                    markers_pose.append(data)
                    break 
                rospy.sleep(0.5)
            
        generate_csv(CORNERS_FILE_NAME,
                    ["Aruco ID", "Parent frame ID", 
                    "position.x","position.y","position.z",
                    "orientation.x", "orientation.y",
                    "orientation.z", "orientation.w"],
                    markers_pose, False)

        rospy.loginfo("All marker means collected.")  
        rospy.signal_shutdown(("All marker means collected."))

if __name__ == '__main__':
    try: 
        main()
    except rospy.ROSInterruptException: 
        pass
